# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake release

on: workflow_dispatch

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        build_type: [Release]
        c_compiler: [gcc, clang]
        include:
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++

    steps:
      - name: "Checkout repository"
        uses: actions/checkout@v4
        with:
          submodules: 'true'
  
      - name: Set reusable strings
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
          echo "sdl-dir=${{ github.workspace }}/libs/SDL" >> "$GITHUB_OUTPUT"
          echo "sdl-image-dir=${{ github.workspace }}/libs/SDL_image" >> "$GITHUB_OUTPUT"
          echo "sdl-ttf-dir=${{ github.workspace }}/libs/SDL_ttf" >> "$GITHUB_OUTPUT"
  
      - name: Compile and install SDL
        shell: bash
        run: |
          cd ${{ steps.strings.outputs.sdl-dir }}
          cmake -S . -B build && cmake --build build && sudo cmake --install build

      - name: Compile and install SDL_image
        shell: bash
        run: |
          cd ${{ steps.strings.outputs.sdl-image-dir }}
          cmake -S . -B build && cmake --build build && sudo cmake --install build

      - name: Compile and install SDL_ttf
        shell: bash
        run: |
          cd ${{ steps.strings.outputs.sdl-ttf-dir }}
          cmake -S . -B build && cmake --build build && sudo cmake --install build
  
      - name: Configure CMake
        run: >
          cmake -B ${{ steps.strings.outputs.build-output-dir }}
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -S ${{ github.workspace }}
  
      - name: Build
        run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

      - name: Archive
        run: |
          cd ${{ github.workspace }}
          zip -r release_archive build/WaterSim res
  
      - name: Publish
        uses: actions/upload-artifact@v4
        with:
          name: release-artifact
          path: ${{ github.workspace }}/release_archive
